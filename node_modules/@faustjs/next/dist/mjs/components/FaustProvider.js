import isNil from 'lodash/isNil.js';
import React from 'react';
import { AUTH_CLIENT_CACHE_PROP, CLIENT_CACHE_PROP, } from '../server/getProps.js';
import { FaustContext } from '../gqty/client.js';
/**
 * The FaustProvider is a React component required to properly facilitate SSR and SSG for Faust.js.
 *
 * @see https://faustjs.org/docs/next/guides/ssr-ssg#rehydration-using-faustprovider-
 */
export function FaustProvider({ children, pageProps, client, }) {
    client.setAsRoot();
    const { useHydrateCache, auth: { useHydrateCache: useAuthHydrateCache }, } = client;
    const cacheSnapshot = pageProps === null || pageProps === void 0 ? void 0 : pageProps[CLIENT_CACHE_PROP];
    const authSnapshot = pageProps === null || pageProps === void 0 ? void 0 : pageProps[AUTH_CLIENT_CACHE_PROP];
    useHydrateCache({
        cacheSnapshot: isNil(cacheSnapshot) ? undefined : cacheSnapshot,
    });
    useAuthHydrateCache({
        cacheSnapshot: isNil(authSnapshot) ? undefined : authSnapshot,
    });
    const value = React.useMemo(() => ({
        client,
    }), [client]);
    return (React.createElement(FaustContext.Provider, { value: value }, children));
}
