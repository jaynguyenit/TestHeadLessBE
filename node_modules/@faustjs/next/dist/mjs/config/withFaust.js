import trim from 'lodash/trim.js';
import isFunction from 'lodash/isFunction.js';
export async function createRedirects(nextConfig, redirectFn, previewDestination = '/preview') {
    let redirects = [];
    const previewQuery = [
        {
            type: 'query',
            key: 'preview',
            value: 'true',
        },
    ];
    if (isFunction(redirectFn)) {
        redirects = await redirectFn();
    }
    let previewPath = trim(previewDestination, '/');
    if (nextConfig === null || nextConfig === void 0 ? void 0 : nextConfig.trailingSlash) {
        previewPath += '/';
    }
    redirects.unshift({
        source: `/((?!${previewPath}).*)`,
        has: previewQuery,
        destination: `/${previewPath}`,
        permanent: false,
    });
    if (nextConfig === null || nextConfig === void 0 ? void 0 : nextConfig.i18n) {
        /**
         * All redirect sources are automatically prefixed with available locales
         * when i18n is configured, so our previous rule won't match '/'. We need
         * an extra rule to catch each locale's root path.
         *
         * https://nextjs.org/docs/api-reference/next.config.js/redirects#redirects-with-i18n-support
         */
        redirects.unshift({
            source: nextConfig.trailingSlash ? '/:lang/' : '/:lang',
            has: previewQuery,
            destination: `/:lang/${previewPath}`,
            permanent: false,
            locale: false,
        });
    }
    return redirects;
}
/**
 * A helper function to merge Faust.js related Next.js config with a user defined Next.js config.
 *
 * @param {NextConfig} config
 * @param {withFaustConfig} withFaustConfig
 * @returns {NextConfig}
 */
export function withFaust(config, withFaustConfig) {
    const { previewDestination } = withFaustConfig || {};
    const nextConfig = config !== null && config !== void 0 ? config : {};
    const existingRedirects = nextConfig.redirects;
    nextConfig.redirects = () => createRedirects(nextConfig, existingRedirects, previewDestination);
    return nextConfig;
}
