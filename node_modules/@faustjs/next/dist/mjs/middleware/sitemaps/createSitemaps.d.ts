/// <reference types="node" />
import { NextRequest } from 'next/server.js';
import { IncomingMessage } from 'http';
import { NormalizedMiddlewareConfig, NormalizedServerConfig } from './handleSitemapRequests.js';
import { SitemapSchemaSitemapElement, SitemapSchemaUrlElement } from './sitemapUtils.js';
/**
 * TypeScript representation of a parsed XML sitemap
 */
export interface ParsedSitemap {
    urlset: {
        url: SitemapSchemaUrlElement[];
    };
}
/**
 * TypeScript representation of a parsed XML sitemap index
 */
export interface ParsedSitemapIndex {
    sitemapindex: {
        sitemap: SitemapSchemaSitemapElement[];
    };
}
/**
 * Creates the root XML sitemap index (e.g. /sitemap.xml) that lists all the
 * sitemaps provided as the sitemapPaths property in the config, in addition to
 * a sitemap for the Next.js pages provided as the pages property in the config.
 *
 * @param {NextRequest} req The Next.js middleware request object
 * @param {NormalizedConfig} normalizedConfig A normalized config object
 * @returns {Response|undefined}
 */
export declare function createRootSitemapIndex(req: NextRequest | IncomingMessage, normalizedConfig: NormalizedMiddlewareConfig | NormalizedServerConfig, isMiddleware?: boolean): Promise<Response | undefined>;
/**
 * Creates a sitemap for the Next.js pages specified in the "pages" config option
 *
 * @param req The Next.js middleware request object
 * @param normalizedConfig A normalized config object
 * @returns {Response|undefined}
 */
export declare function createPagesSitemap(req: NextRequest | IncomingMessage, normalizedConfig: NormalizedMiddlewareConfig | NormalizedServerConfig, isMiddleware?: boolean): Response | undefined;
/**
 * Handles a request to a sitemap path listed in the sitemapPaths config option
 *
 * @param req The Next.js middleware request object
 * @param normalizedConfig A normalized config object
 * @returns {Promise<Response|Undefined>}
 */
export declare function handleSitemapPath(req: NextRequest | IncomingMessage, normalizedConfig: NormalizedMiddlewareConfig | NormalizedServerConfig, isMiddleware?: boolean): Promise<Response | undefined>;
/**
 * Handles a request to the `/robots.txt` path
 *
 * @param req The Next.js middleware request object
 * @param normalizedConfig A normalized config object
 * @returns {Promise<Response|Undefined>}
 */
export declare function handleRobotsTxt(req: NextRequest, normalizedConfig: NormalizedMiddlewareConfig | NormalizedServerConfig): Promise<Response | undefined>;
