import { NextRequest } from 'next/server.js';
import { SitemapSchemaUrlElement } from './sitemapUtils.js';
/**
 * the "pages" config type
 */
export interface NextJSPage extends Omit<SitemapSchemaUrlElement, 'loc'> {
    /**
     * The relative URL of the Next.js page.
     *
     * @example /about
     */
    path: string;
}
export interface GetSitemapPropsConfig extends HandleSitemapRequestsConfig {
    /**
     * The headless frontend URL
     */
    frontendUrl: string;
}
export interface HandleSitemapRequestsConfig {
    /**
     * The URL of your WordPress site.
     *
     * @example https://my-wp-site.com
     */
    wpUrl: string;
    /**
     * The sitemap path for server side
     */
    sitemapIndexPath: string;
    /**
     * A list of pathnames to ignore when proxying sitemaps.
     */
    sitemapPathsToIgnore?: string[];
    /**
     * Next.js pages you want included in you sitemap. When provided, an index
     * will be created specifically for these pages.
     */
    pages?: NextJSPage[];
    /**
     * Replace the WordPress site URL for your headless frontend site url in the
     * sitemap url entries.
     */
    replaceUrls?: boolean;
    /**
     * If defined, the text returned from this function will be used for the
     * `/robots.txt` route. The `/robots.txt` route will not be created if this
     * function is not defined.
     */
    robotsTxt?: (sitemapUrl: string) => Promise<string>;
}
export interface NormalizedMiddlewareConfig extends Omit<HandleSitemapRequestsConfig, 'replaceUrls'> {
    replaceUrls: boolean;
}
export interface NormalizedServerConfig extends Omit<GetSitemapPropsConfig, 'replaceUrls'> {
    replaceUrls: boolean;
}
/**
 * The pathname to the Next.js pages sitemap file. We may want to make this
 * configurable in the future.
 */
export declare const FAUST_PAGES_PATHNAME = "/sitemap-faust-pages.xml";
/**
 * The pathname to the robots.txt file.
 */
export declare const FAUST_ROBOTS_PATHNAME = "/robots.txt";
/**
 * Validates the structure of the user defined config.
 *
 * @param {Partial<HandleSitemapRequestsConfig>} config The user provided config
 */
export declare function validateConfig(config: Partial<HandleSitemapRequestsConfig & GetSitemapPropsConfig>, isMiddleware?: boolean): void;
/**
 * Next.js middleware to proxy sitemap requests from the WordPress site.
 *
 * @param req The Next.js middleware request object
 * @param config The user specified config object
 * @returns {Response|undefined} A response object if the current request
 * is for a sitemap that needs to be handled, undefined otherwise
 */
export declare function handleSitemapRequests(req: NextRequest, config: HandleSitemapRequestsConfig): Promise<Response | undefined>;
