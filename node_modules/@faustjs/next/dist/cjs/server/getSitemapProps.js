"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSitemapProps = void 0;
/* eslint-disable import/extensions */
const utils_1 = require("@faustjs/core/utils");
const createSitemaps_js_1 = require("../middleware/sitemaps/createSitemaps.js");
const handleSitemapRequests_js_1 = require("../middleware/sitemaps/handleSitemapRequests.js");
async function getSitemapProps(ctx, config) {
    // config validation with middleware flag
    (0, handleSitemapRequests_js_1.validateConfig)(config, false);
    // Normalize config if some optional values are missing
    const normalizedConfig = Object.assign(Object.assign({}, config), { replaceUrls: true });
    if (!ctx.req.url) {
        throw new Error('A context url is required.');
    }
    const queryParam = (0, utils_1.getQueryParam)(ctx.req.url, 'sitemap');
    if (queryParam === '') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        const response = await (0, createSitemaps_js_1.createRootSitemapIndex)(ctx.req, normalizedConfig, false);
        if (!response || (response === null || response === void 0 ? void 0 : response.status) === 404) {
            return {
                notFound: true,
            };
        }
        ctx.res.setHeader('Content-Type', 'application/xml');
        ctx.res.write(await (response === null || response === void 0 ? void 0 : response.text()));
        ctx.res.end();
    }
    if (queryParam !== '' && queryParam !== 'sitemap-faust-pages.xml') {
        const response = await (0, createSitemaps_js_1.handleSitemapPath)(ctx.req, normalizedConfig, false);
        if (!response || (response === null || response === void 0 ? void 0 : response.status) === 404) {
            return {
                notFound: true,
            };
        }
        ctx.res.setHeader('Content-Type', 'application/xml');
        ctx.res.write(await (response === null || response === void 0 ? void 0 : response.text()));
        ctx.res.end();
    }
    if (queryParam !== '' && queryParam === 'sitemap-faust-pages.xml') {
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        const response = (0, createSitemaps_js_1.createPagesSitemap)(ctx.req, normalizedConfig, false);
        ctx.res.setHeader('Content-Type', 'application/xml');
        ctx.res.write(await (response === null || response === void 0 ? void 0 : response.text()));
        ctx.res.end();
    }
    return {
        props: {},
    };
}
exports.getSitemapProps = getSitemapProps;
