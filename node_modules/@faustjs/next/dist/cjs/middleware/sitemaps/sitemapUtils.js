"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trimSlashes = exports.isFunction = exports.isObject = exports.isBoolean = exports.isUndefined = exports.isArray = exports.isString = exports.createSitemap = exports.createSitemapIndex = void 0;
/**
 * Creates an XML sitemap index file from a list of sitemap URLs
 *
 * @param {SitemapSchemaSitemapElement[]} sitemaps A list of sitemap URL objects
 * @returns
 */
function createSitemapIndex(sitemaps) {
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
      <sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${sitemaps
        .map((sitemap) => {
        const loc = `<loc>${sitemap.loc}</loc>`;
        let lastmod = '';
        if (sitemap === null || sitemap === void 0 ? void 0 : sitemap.lastmod) {
            lastmod = `<lastmod>${sitemap.lastmod}</lastmod>`;
        }
        return `<sitemap>
            ${loc}
            ${lastmod}
          </sitemap>`;
    })
        .join('')}
      </sitemapindex>`;
    const response = new Response(xml);
    response.headers.set('Content-Type', 'application/xml');
    return response;
}
exports.createSitemapIndex = createSitemapIndex;
/**
 * Creates an XML Sitemap from a list of URLs
 *
 * @param {SitemapSchemaUrlElement[]} urls A list of URL objects
 * @returns {Response}
 */
function createSitemap(urls) {
    const xml = `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
      ${urls
        .map((url) => {
        const loc = `<loc>${url.loc}</loc>`;
        let lastmod = '';
        let changefreq = '';
        let priority = '';
        if (url === null || url === void 0 ? void 0 : url.lastmod) {
            lastmod = `<lastmod>${url.lastmod}</lastmod>`;
        }
        if (url === null || url === void 0 ? void 0 : url.changefreq) {
            changefreq = `<changefreq>${url.changefreq}</changefreq>`;
        }
        if (url === null || url === void 0 ? void 0 : url.priority) {
            priority = `<priority>${url.priority}</priority>`;
        }
        return `<url>
              ${loc}
              ${lastmod}
              ${changefreq}
              ${priority}
          </url>`;
    })
        .join('')}
    </urlset>`;
    const response = new Response(xml);
    response.headers.set('Content-Type', 'application/xml');
    return response;
}
exports.createSitemap = createSitemap;
/**
 * The below helper functions are pretty close to exactly what Lodash exports.
 * We are not including lodash because Next.js middleware is very sensitive to
 * imports. Lodash uses eval, and new Function(evalString), which is not supported
 * by Next.js middleware.
 *
 * @link https://nextjs.org/docs/api-reference/edge-runtime#unsupported-apis
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isString(str) {
    // eslint-disable-next-line @typescript-eslint/no-unsafe-call
    if (str != null && typeof str.valueOf() === 'string') {
        return true;
    }
    return false;
}
exports.isString = isString;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isArray(arr) {
    return Array.isArray(arr);
}
exports.isArray = isArray;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isUndefined(val) {
    return val === undefined;
}
exports.isUndefined = isUndefined;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isBoolean(val) {
    return typeof val === 'boolean';
}
exports.isBoolean = isBoolean;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isObject(val) {
    const type = typeof val;
    return val != null && (type === 'object' || type === 'function');
}
exports.isObject = isObject;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function isFunction(val) {
    return typeof val === 'function';
}
exports.isFunction = isFunction;
function trimSlashes(str) {
    return str.replace(/^\/+|\/+$/g, '');
}
exports.trimSlashes = trimSlashes;
