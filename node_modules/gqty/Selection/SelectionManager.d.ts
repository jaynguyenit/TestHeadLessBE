import { Selection, SelectionConstructorArgs } from './selection';
export declare function separateSelectionTypes(selections: Selection[] | Set<Selection>): {
    querySelections: Selection[] | undefined;
    mutationSelections: Selection[] | undefined;
    subscriptionSelections: Selection[] | undefined;
};
export interface GetSelection {
    ({ key, prevSelection, args, argTypes, type, unions, }: Pick<SelectionConstructorArgs, 'key' | 'prevSelection' | 'args' | 'argTypes' | 'type' | 'unions'>): Selection;
}
export interface SelectionManager {
    getSelection: GetSelection;
    restore(backup: unknown): void;
    backup(): SelectionsBackup;
}
export declare type VariableHashTuple = [
    serializedVariables: string,
    variablesStringId: string
];
export declare type SelectionsBackup = [VariableHashTuple[], string];
export declare function createSelectionManager(): SelectionManager;
