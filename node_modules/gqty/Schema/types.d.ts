import type { ExecutionResult } from 'graphql';
export interface Type {
    __args?: Record<string, string>;
    __type: string;
}
export declare const SchemaUnionsKey: unique symbol;
export interface Schema extends Record<string, Record<string, Type>> {
    query: Record<string, Type>;
    mutation: Record<string, Type>;
    subscription: Record<string, Type>;
    [SchemaUnionsKey]?: Record<string, readonly string[]>;
}
export interface Scalars {
    String: string;
    Int: number;
    Float: number;
    ID: string;
}
export declare type ScalarsEnumsHash = Record<string, true>;
export interface FetchOptions extends Omit<RequestInit, 'body'> {
}
export declare type QueryFetcher = (query: string, variables: Record<string, any> | undefined, fetchOptions?: FetchOptions) => Promise<ExecutionResult> | ExecutionResult;
export interface ParseSchemaTypeInfo {
    pureType: string;
    isNullable: boolean;
    hasDefaultValue: boolean;
    isArray: boolean;
    nullableItems: boolean;
}
export interface FieldDescription {
    description?: string | null;
    deprecated?: string | null;
    defaultValue?: string | null;
}
export declare type ArgsDescriptions = Record<string, Record<string, FieldDescription | undefined>>;
export declare function parseSchemaType(type: string, fieldDesc?: FieldDescription | undefined): ParseSchemaTypeInfo;
export declare type DeepPartial<T> = T extends Function ? T : T extends Array<infer U> ? _DeepPartialArray<U> : T extends object ? _DeepPartialObject<T> : T | undefined;
interface _DeepPartialArray<T> extends Array<DeepPartial<T>> {
}
declare type _DeepPartialObject<T> = {
    [P in keyof T]?: DeepPartial<T[P]>;
};
export {};
